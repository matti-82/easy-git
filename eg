#!/bin/bash

if [ "$1" = "" ]; then
	echo
	echo Easy-Git 1.9
	echo "(c)2019-2020 by Matthias Rossmy"
	echo This program is distributed under the MIT license
	echo
	echo Usage:
	echo
	echo "$(basename ${BASH_SOURCE[0]}) new <dirname>              //create new git repo"
	echo "$(basename ${BASH_SOURCE[0]}) clone <URL>                //clone repo"
	echo "$(basename ${BASH_SOURCE[0]}) connect <URL>              //connect local repo with remote repo"
	echo "$(basename ${BASH_SOURCE[0]}) pull                       //update repo from server"
	echo "$(basename ${BASH_SOURCE[0]}) commit [<tagname>]         //commit changes or amend commit"
	echo "$(basename ${BASH_SOURCE[0]}) push [<remote-branch>]     //push local commits to server"
	echo "$(basename ${BASH_SOURCE[0]}) tag [<name> [<commit-ID>]] //set a tag to a commit"
	echo "$(basename ${BASH_SOURCE[0]}) branches                   //list all branches"
	echo "$(basename ${BASH_SOURCE[0]}) usebranch <name>           //use a specific branch (create if not exist)"
	echo "$(basename ${BASH_SOURCE[0]}) delbranch <name>           //delete branch"
	echo "$(basename ${BASH_SOURCE[0]}) log [<ref>]                //show history (without ref everything is shown)"
	echo "$(basename ${BASH_SOURCE[0]}) show <commit-ID> <file>    //show file of commit"
	echo "$(basename ${BASH_SOURCE[0]}) changes [<commit-ID>]      //show changes in working dir or of commit"
	echo "$(basename ${BASH_SOURCE[0]}) goto <commit-ID>           //bring working dir to specific commit"
	echo "$(basename ${BASH_SOURCE[0]}) undo [local|<commit-ID>]   //undo uncommitted/all local/single commit"
	echo "$(basename ${BASH_SOURCE[0]}) pick <commit-ID>           //import commit from other branch into this branch"
	echo "$(basename ${BASH_SOURCE[0]}) importbranch <name>        //import other branch into this branch"
	echo
fi

if [ "$1" = "new" ]; then
	mkdir $2
	cd $2
	git init
fi

if [ "$1" = "clone" ]; then
	git clone --recursive "$2"
fi

if [ "$1" = "connect" ]; then
	git status 2>/dev/null || git init
	git remote add -f origin "$2" && git reset --merge origin/master
fi

if [ "$1" = "pull" ] || [ "$1" = "update" ] || [ "$1" = "u" ]; then
	git fetch
	LOCALBRANCH=$(git symbolic-ref --short HEAD)
	if [ $(git branch --list -r origin/$LOCALBRANCH | wc -l) -ne 0 ]; then
		#echo local branch exists on server
		REMOTEBRANCH=$LOCALBRANCH
	else
		#echo local branch does not exist on server
		echo Remote branches:
		git branch -r
		echo "Rebase local commits onto which branch? (leave empty to skip rebase)"
		echo -n "origin/"
		read REMOTEBRANCH
	fi
	if [ "$REMOTEBRANCH" != "" ]; then
		git diff --quiet HEAD
		STASH=$?
		if [ $STASH -ne 0 ]; then
			git stash
		fi
		git rebase -X theirs origin/$REMOTEBRANCH
		if [ $STASH -ne 0 ]; then
			git cherry-pick -n -m1 --strategy=recursive -Xtheirs stash
			git stash drop -q
		fi
	fi
	git submodule update --recursive
fi

if [ "$1" = "commit" ] || [ "$1" = "c" ]; then
	git add -u
	if ! gitg -c 2>/dev/null ; then
		if [ $(git ls-files -m | wc -l) -ne 0 ]; then
			echo These files will be committed:
			git ls-files -m
			ADDITIONAL=" additionally"
		fi
		if [ $(git ls-files --others | wc -l) -ne 0 ]; then
			echo These files are not yet selected for commit:
			git ls-files --others
			echo "...which of these files should be selected$ADDITIONAL? (separated by space, leave empty to add no more files)"
			read -e FILES
			git add $FILES 2>/dev/null
		fi
		${BASH_SOURCE[0]} changes
		echo "...commit that? (y/n/a, a=amend)"
		read CONFIRM
		if [ "$CONFIRM" != "n" ]; then
			if [ "$CONFIRM" = "a" ]; then
				COMMITOPTIONS="--amend"
			fi
			git commit -a $COMMITOPTIONS
		fi
	fi
	if [ "$2" != "" ]; then
		git tag -f $2
	fi
fi

if [ "$1" = "push" ]; then
	LOCALBRANCH=$(git symbolic-ref --short HEAD)
	git fetch
	if [ "$2" = "" ]; then
		if [ $(git branch --list -r origin/$LOCALBRANCH | wc -l) -ne 0 ]; then
			#echo local branch exists on server
			REMOTEBRANCH=$LOCALBRANCH
		else
			#echo local branch does not exist on server
			echo Remote branches:
			git branch -r
			echo "Push to which branch? (leave empty to create $LOCALBRANCH)"
			echo -n "origin/"
			read REMOTEBRANCH
			if [ "$REMOTEBRANCH" = "" ]; then
				REMOTEBRANCH=$LOCALBRANCH
			fi
		fi
	else
		REMOTEBRANCH=$2
	fi
	git push origin HEAD:$REMOTEBRANCH --tags --force-with-lease
fi

if [ "$1" = "tag" ]; then
	TAGNAME="$2"
	if [ "$TAGNAME" = "" ]; then
		git tag
		echo New tag name:
		read TAGNAME
	fi
	#git tag -f -a -m "$TAGNAME" "$TAGNAME" $3
	git tag -f "$TAGNAME" $3
fi

if [ "$1" = "branches" ] || [ "$1" = "bs" ]; then
	git branch -a
fi

if [ "$1" = "usebranch" ] || [ "$1" = "b" ]; then
	if git rev-parse --verify $2 2>/dev/null || git rev-parse --verify origin/$2 2>/dev/null; then
		git commit -a -m "[work in progress]" >/dev/null
		git checkout -q $2 2>/dev/null
		if [ "$(git log --pretty=tformat:'%s' HEAD^..HEAD)" = "[work in progress]" ]; then
			git reset --soft HEAD^
		fi
	else
		echo Create new branch
		git checkout -q -b $2 2>/dev/null
	fi
	echo You are now on $(git symbolic-ref --short HEAD)
fi

if [ "$1" = "delbranch" ]; then
	if [ "$(git symbolic-ref --short HEAD)" = "$2" ]; then
		git checkout -q master
		echo You are now on $(git symbolic-ref --short HEAD)
	fi
	git branch -D $2
fi

if [ "$1" = "log" ] || [ "$1" = "l" ]; then
	if [ "$2" = "" ]; then
		WHAT="--all"
	else
		WHAT="${@:2}"
	fi
	git --no-pager log --color=always --reverse --date=short --abbrev=16 --pretty=tformat:'%cd %C(dim)%<(5,trunc)%p> %h%Creset §%H: %s%Cgreen%d%Creset' $WHAT | git name-rev --stdin --name-only --refs='refs/?e*[!H][!E][!A][!D]' | sed -e s:remotes/::g | sed -e s:§origin/::g | sed -e s:§::g | sed -e 's:~[0-9]*::g' | sed -e 's:\^[0-9]*::g'
	echo 
	if [ "$2" = "" ]; then
		echo You are currently on $(git symbolic-ref --short HEAD)
	fi
fi

if [ "$1" = "show" ]; then
	if [ "$3" = "" ]; then
		git --no-pager show $2
	else
		for i in {1..80}; do echo -n =; done
		echo
		git --no-pager show $2:./$3
		echo
	fi
fi

if [ "$1" = "changes" ] || [ "$1" = "d" ]; then
	for i in {1..80}; do echo -n =; done
	echo
	if [ "$2" = "" ]; then
		git status -s
		git --no-pager diff --diff-algorithm=patience --color-words -U4 HEAD
	else
		git --no-pager show --diff-algorithm=patience --color-words -U4 $2
	fi
fi

if [ "$1" = "goto" ]; then
	git reset -q --hard
	git checkout -q $2
fi

if [ "$1" = "undo" ]; then
	LOCALBRANCH=$(git symbolic-ref --short HEAD)
	if [ "$2" = "" ]; then
		git reset --hard
	elif [ "$2" = "local" ]; then
		if [ $(git branch --list -r origin/$LOCALBRANCH | wc -l) -ne 0 ]; then
			#echo local branch exists on server
			REMOTEBRANCH=$LOCALBRANCH
		else
			echo $LOCALBRANCH does not exist on server, resetting to master
			REMOTEBRANCH=master
		fi
		git reset --hard origin/$REMOTEBRANCH
	else
		if [ $(git --no-pager log --pretty=tformat:'%h' $2.. | wc -l) -eq 0 ] && [ $(git --no-pager log --pretty=tformat:'%H' origin/$LOCALBRANCH 2>/dev/null | grep $2 | wc -l) -eq 0 ]; then
			git reset --hard HEAD~1
		else
			git revert $2
		fi
	fi
fi

if [ "$1" = "pick" ]; then
	git cherry-pick --strategy=recursive -X theirs $2
fi

if [ "$1" = "importbranch" ]; then
	git merge --strategy=recursive -X theirs --no-edit $2
fi

